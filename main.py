# -*- coding: utf-8 -*-
from base64 import b64encode
from io import BytesIO

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QFileDialog
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
from jinja2 import Environment, FileSystemLoader
import base64
import numpy as np
import pdfkit


class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def data(self, index, role=Qt.DisplayRole):
        if index.isValid():
            if role == Qt.DisplayRole:
                return str(self._data.iloc[index.row(), index.column()])
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
        return None

    def rowCount(self, parent=None):
        # The length of the outer list.
        return self._data.shape[0]

    def columnCount(self, parent=None):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return self._data.shape[1]


def dialog():
    file, check = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                              "", "All Files (*);;Python Files (*.py);;Text Files (*.txt)")
    if check:
        # Ruta del archivo
        ui.lineEdit.setText(file)
        # Abrir archivo e imprimir tabla
        excel_data = pd.read_excel(file)
        excel_data['Fecha'] = pd.to_datetime(excel_data['Fecha'])

        # Read the values of the file in the dataframe
        data = pd.DataFrame(excel_data)
        model = TableModel(data)
        ui.tableView.setModel(model)
        ui.dataframe = data
        ui.dataframe['Fecha'] = ui.dataframe['Fecha'].dt.strftime('%d/%m/%Y')

        ui.dataframe.rename(columns={'16-bit Unsigned': 'sonda1',
                                     '16-bit Unsigned.1': 'sonda2',
                                     '16-bit Unsigned.2': 'sonda3',
                                     '16-bit Unsigned.3': 'aire',
                                     '16-bit Unsigned.4': 'Min',
                                    '16-bit Unsigned.6': 'Est'
        }, inplace=True)
        ui.dataframe.drop(columns=['Milisegundo','16-bit Unsigned.5','16-bit Unsigned.7'],inplace=True)

def build_Plot():
    """ui.dataframe['16-bit Unsigned.1'] = ui.dataframe['16-bit Unsigned.1'] / 10
    ui.dataframe['16-bit Unsigned.2'] = ui.dataframe['16-bit Unsigned.2'] / 10
    ui.dataframe['16-bit Unsigned'] = ui.dataframe['16-bit Unsigned'] / 10

    lines = ui.dataframe.plot.line(x='Hora', y=['16-bit Unsigned', '16-bit Unsigned.1', '16-bit Unsigned.2',
                                                '16-bit Unsigned.3', ])
    image = BytesIO()
    plt.savefig(image, format='png')


    ui.dataframe['16-bit Unsigned.1'] = ui.dataframe['16-bit Unsigned.1'] * 10
    ui.dataframe['16-bit Unsigned.2'] = ui.dataframe['16-bit Unsigned.2'] * 10
    ui.dataframe['16-bit Unsigned'] = ui.dataframe['16-bit Unsigned'] * 10"""

    ui.dataframe['sonda1'] = ui.dataframe['sonda1'] / 10
    ui.dataframe['sonda2'] = ui.dataframe['sonda2'] / 10
    ui.dataframe['sonda3'] = ui.dataframe['sonda3'] / 10

    lines = ui.dataframe.plot.line(x='Hora', y=['sonda1', 'sonda2', 'sonda3', 'aire'])
    plt.grid()
    image = BytesIO()
    plt.savefig(image, format='png')

    ui.dataframe['sonda1'] = ui.dataframe['sonda1'] * 10
    ui.dataframe['sonda2'] = ui.dataframe['sonda2'] * 10
    ui.dataframe['sonda3'] = ui.dataframe['sonda3'] * 10

    return base64.b64encode(image.getvalue()).decode()


def build_plot_table():

    df = ui.dataframe.tail(20)
    print(df)
    #define figure and axes
    fig, ax = plt.subplots()
    #hide the axes
    fig.patch.set_visible(False)
    ax.axis('off')
    ax.axis('tight')
    # create table
    table = plt.table(cellText=df.values, colLabels=df.keys(), loc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(8)
    fig.tight_layout()
    #plt.show()

    image = BytesIO()
    plt.savefig(image, format='png')

    return base64.b64encode(image.getvalue()).decode()

def plot():
    ui.dataframe['sonda1'] = ui.dataframe['sonda1'] / 10
    ui.dataframe['sonda2'] = ui.dataframe['sonda2'] / 10
    ui.dataframe['sonda3'] = ui.dataframe['sonda3'] / 10

    lines = ui.dataframe.plot.line(x='Hora', y=['sonda1', 'sonda2', 'sonda3', 'aire' ])
    x = ui.dataframe['Hora']
    #plt.xticks(np.arange(min(x), max(x) + 1, 1.0))
    plt.yticks(np.arange(min(ui.dataframe['aire']), max(ui.dataframe['aire']) + 1, 5.0))
    plt.grid()
    #plt.show()

    ui.dataframe['sonda1'] = ui.dataframe['sonda1'] * 10
    ui.dataframe['sonda2'] = ui.dataframe['sonda2'] * 10
    ui.dataframe['sonda3'] = ui.dataframe['sonda3'] * 10


def change_date():
    datetime = ui.dateTimeEdit.dateTime()
    # print(datetime)
    ui.dataframe.Fecha = datetime
    return None


def generate_report():
    url = build_Plot()
    table = build_plot_table()

    env = Environment(loader=FileSystemLoader('templates'))
    template = env.get_template('template.html')
    date = ui.dateTimeEdit.dateTime().toPyDateTime()

    html = template.render(secada="30/23",
                           ref=ui.fieldRef.text(),
                           field1=ui.lineEdit_4.text(),
                           field2=ui.lineEdit_5.text(),
                           camara=ui.lineEdit_2.text(),
                           temp=ui.lineEdit_6.text(),
                           time=ui.lineEdit_3.text(),
                           date=date.strftime('%d/%m/%Y'),
                           url=url,
                           table=table)


    with open(ui.fieldRef.text() + ".html", 'w') as f:
        f.write(html)
    f.close()
    #pdfkit.from_file(ui.fieldRef.text() + ".html", ui.fieldRef.text()+'.pdf')


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(753, 692)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 751, 691))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(6, 6, 6, 6)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_13.addWidget(self.label_4)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_13.addWidget(self.lineEdit_2)
        self.label_9 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_13.addWidget(self.label_9)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.horizontalLayout_13.addWidget(self.lineEdit_6)
        self.label_8 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_13.addWidget(self.label_8)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalLayout_13.addWidget(self.lineEdit_3)
        self.verticalLayout_3.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_7 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_12.addWidget(self.label_7)
        self.fieldRef = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.fieldRef.setObjectName("fieldRef")
        self.horizontalLayout_12.addWidget(self.fieldRef)
        self.verticalLayout_3.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_6 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_11.addWidget(self.label_6)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.horizontalLayout_11.addWidget(self.lineEdit_4)
        self.verticalLayout_3.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_10.addWidget(self.label_5)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.horizontalLayout_10.addWidget(self.lineEdit_5)
        self.verticalLayout_3.addLayout(self.horizontalLayout_10)
        self.verticalLayout.addLayout(self.verticalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.btnOpenFile = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnOpenFile.setObjectName("btnOpenFile")
        self.horizontalLayout.addWidget(self.btnOpenFile)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.verticalLayoutWidget)
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.horizontalLayout_2.addWidget(self.dateTimeEdit)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_2.addWidget(self.pushButton_3)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.tableView = QtWidgets.QTableView(self.verticalLayoutWidget)
        self.tableView.setObjectName("tableView")
        self.horizontalLayout_3.addWidget(self.tableView)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_4.setText(_translate("MainWindow", "Camara:"))
        self.label_9.setText(_translate("MainWindow", "Temperatura:"))
        self.label_8.setText(_translate("MainWindow", "Tiempo:"))
        self.label_7.setText(_translate("MainWindow", "REF:"))
        self.label_6.setText(_translate("MainWindow", "Producto:"))
        self.label_5.setText(_translate("MainWindow", "Producto2:"))
        self.label.setText(_translate("MainWindow", "Archivo"))
        self.btnOpenFile.setText(_translate("MainWindow", "Abrir"))
        self.label_2.setText(_translate("MainWindow", "Fecha Inicio"))
        self.pushButton.setText(_translate("MainWindow", "Modificar"))
        self.pushButton_2.setText(_translate("MainWindow", "Plot"))
        self.pushButton_3.setText(_translate("MainWindow", "PDF"))


if __name__ == "__main__":
    import sys

    now = datetime.now()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.btnOpenFile.clicked.connect(dialog)
    ui.pushButton.clicked.connect(change_date)
    ui.pushButton_2.clicked.connect(build_plot_table)
    ui.pushButton_3.clicked.connect(generate_report)
    ui.dateTimeEdit.setDateTime(now)
    MainWindow.show()
    dataframe = {}
    sys.exit(app.exec_())
